package jmetal.test.survivalanalysis;

//TestSurvivalAnalysis.java
//
//Author:
// Nasimul Noman <nasimul.noman@newcastle.edu.au>
//
//Copyright (c) 2014 Nasimul Noman
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>. * SurvivalAnalysis.java

import java.awt.FileDialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;

import org.rosuda.JRI.RMainLoopCallbacks;
import org.rosuda.JRI.Rengine;
import org.rosuda.JRI.REXP;

import weka.clusterers.HierarchicalClusterer;
import weka.core.Attribute;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.converters.ArffSaver;
import weka.core.converters.ConverterUtils.DataSource;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;
import jmetal.core.Problem;
import jmetal.core.Solution;
import jmetal.encodings.solutionType.BinarySolutionType;
import jmetal.encodings.variable.Binary;

//import javastat.survival.inference.LogRankTest;
//import javastat.survival.inference.WilcoxonTest;
//import javastat.StatisticalAnalysis;
import survivalanalysis.*;

/**
* Class representing problem SurvivalAnalysis. The problem consist of feature selection
* using Survival Analysis curve. The features are selected using a binary string
* where '1's and '0's represents the selected and non-selected features respectively.
*/

public class TestSurvivalAnalysis {

	public static void main (String[] args){
		
		String dataFileName = "Group12_106X1002.arff";
		
		String testDataFileName = null;
		String[] solnID = {"Soln-01", "Soln-02", "Soln-03","Soln-04", "Soln-05", "Soln-06", "Soln-07","Soln-08", "Soln-09", "Soln-10","Soln-11", "Soln-12", "Soln-13","Soln-14", "Soln-15", "Soln-16", "Soln-17","Soln-18", "Soln-19", "Soln-20"};
		String[] solnStrings = {
				"0001000000001000000000000000100000010001000000010000000000100011000000000000100000000100000000100000000000000000000001000010000000100001000000000010010000000000000000000000000000000000000000000000000000000000001000001000000001000000000000000000000000000000100000000000000000100001000100000010000000000001000000010000100000000000000000000000000100000000000000000000000000010000110000000000000100010000000001000100000000001000000100100000000000000000100000000000000000000000010000000000000000000000000000010001000001000000000000000000000000000001000000010000000010000000000000000000010000000000000000000000000000000000000000000000000010000000000000000100101000000000001001000000001000000000000000000000000000010001000000000000010000000010000000000000100000010000000000000000000100000000000000000001000000000000000000000001000100000000010010100000001000000000001000000000000000000000000000000000000100000000000001000000000010100000000000000000000000000000000010000000000000000000000000000000001000100000",
				
				
				
				
				
		};

		int numberOfBits = solnStrings[0].length();

		int numberOfObj = 2;
		boolean pVal = true;
		boolean fMax =false;
		String linkType = "COMPLETE";

		
		try{
			
		// Connect to R Engine
			
			if (!Rengine.versionCheck()) {
			    System.err.println("** Version mismatch - Java files don't match library version.");
			    System.exit(1);
			}
		    System.out.println("Creating Rengine (with arguments)");
				// 1) we pass the arguments from the command line
				// 2) we won't use the main loop at first, we'll start it later
				//    (that's the "false" as second argument)
				// 3) the callbacks are implemented by the TextConsole class above
			Rengine re=new Rengine(args, false, new TextConsole());
		    System.out.println("Rengine created, waiting for R");
				// the engine creates R is a new thread, so we should wait until it's ready
		    if (!re.waitForR()) {
		            System.err.println("Cannot load R");
		            return;
		    }
		    
			//problem = new SurvivalAnalysis("Binary",numberOfBits,"basalSamplesRef33_169.arff", re, pValue, featureMaximization);

			


			GenerateSurvivalGraph problem = new GenerateSurvivalGraph("Binary",numberOfBits, numberOfObj, dataFileName, testDataFileName, re, pVal, fMax, linkType);
			System.out.println("Data file name: " + dataFileName + "\n");
			
			Binary[] vars =null;
			Solution solution = new Solution(problem);
			
			for (int ind=0; ind<solnStrings.length; ++ind){
			
				System.out.println("\n\nSolution ID: " + solnID[ind]);
				vars= new Binary[1];
				vars[0] = new Binary(solnStrings[ind].length());
				for (int i=0; i<solnStrings[ind].length();++i){
					if(solnStrings[ind].charAt(i)=='1'){
						vars[0].bits_.set(i, true);
					}
					else if(solnStrings[ind].charAt(i)=='0'){
						vars[0].bits_.set(i, false);
					}
					else{
						System.err.println("Invalid character in solution string.");
						System.exit(1);
					}
				}

				solution.setDecisionVariables(vars);
				//problem.SolutionID = ind+1;
				problem.setSolnID(solnID[ind]);
				problem.evaluate(solution);
			}
			
			
		
		}
		catch(Exception e){
			System.err.println("Error in problem / solution creation.");
			e.printStackTrace();
		}

	}

}



class TextConsole implements RMainLoopCallbacks
{
    public void rWriteConsole(Rengine re, String text, int oType) {
        System.out.print(text);
    }
    
    public void rBusy(Rengine re, int which) {
        System.out.println("rBusy("+which+")");
    }
    
    public String rReadConsole(Rengine re, String prompt, int addToHistory) {
        System.out.print(prompt);
        try {
            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
            String s=br.readLine();
            return (s==null||s.length()==0)?s:s+"\n";
        } catch (Exception e) {
            System.out.println("jriReadConsole exception: "+e.getMessage());
        }
        return null;
    }
    
    public void rShowMessage(Rengine re, String message) {
        System.out.println("rShowMessage \""+message+"\"");
    }
	
    public String rChooseFile(Rengine re, int newFile) {
	FileDialog fd = new FileDialog(new Frame(), (newFile==0)?"Select a file":"Select a new file", (newFile==0)?FileDialog.LOAD:FileDialog.SAVE);
	fd.show();
	String res=null;
	if (fd.getDirectory()!=null) res=fd.getDirectory();
	if (fd.getFile()!=null) res=(res==null)?fd.getFile():(res+fd.getFile());
	return res;
    }
    
    public void   rFlushConsole (Rengine re) {
    }
	
    public void   rLoadHistory  (Rengine re, String filename) {
    }			
    
    public void   rSaveHistory  (Rengine re, String filename) {
    }			

}

		
		
		