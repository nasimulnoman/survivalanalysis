package jmetal.test.survivalanalysis;

import java.awt.FileDialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.rosuda.JRI.RMainLoopCallbacks;
import org.rosuda.JRI.Rengine;

import jmetal.problems.SurvivalAnalysis;
import jmetal.core.Solution;
import jmetal.core.Variable;
import jmetal.encodings.variable.Binary;

public class TestSurvivalAnalysis {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//String dataFileName = "basalSamplesRef33_MSTkNNDefault-MSTkNNk=1.arff"; //"basalSamplesRef33_ClinicalData.nbi.final_389_25.arff";
		//String dataFileName = "filteredDataMSTkNNk=2.arff";
		String dataFileName = "GBM-1740x196-Min-ADJC.arff";//"GBM-1740x196 -Max.arff";//"GBM-1740x194-Min-L1S2-G2.arff"; //"GBM-1740x194-Max-L1S3-G2.arff";//"1740x168.NA.filtered.Soln09.G2.arff";//"1740x168.NA.filtered.Soln09.G2.arff";//"1740X38-Soln10-Soln05-Soln02-Soln17-G10.arff";//"1750X55-Soln10-Soln05-Soln10-G8.arff";//"1750X66-Soln10-Soln05-Soln10-G7.arff";//"1740X46-Sol10-Sol05-Sol02-G6.arff";//"1740X48-Soln10-Soln05-G3.arff";//"1740X48-Soln10-Soln05-G4.arff";//"1740X27-Soln10-G1.arff";//"1740x196.NA.filtered.G2.arff";//"GBM-1740x196.arff";;//"GBM-Proneural-210x52.arff";//"GBM-Proneural1740x56.arff";//"_BC1000MostVar.arff";//"_BC500mostVar.arff"; //"_BC3-ff.arff";
		String testDataFileName = null;//"GBM-Proneural-210x52-class.arff";//"_BC1000MostVar_class.arff";//"_BC500mostVar_class.arff"; //"_BC3-ff_class.arff";
		//String solnString = "1000110011100001100010100100001101101000";
		//String solnString = "001000111001010100100010011100110001010001100000011110010100100111101001000101010001001001011011000001000011101101010100010000000001001001100001110001101111001011010100000000011101000010001100010011110001110000101101111011001010111101011110010";
		//String solnString = "101110000000011101110100000000010100011000001100010100000010101101101001000010100111101111010010001100001000001000001101010000001100010110101010010000100011010001110100110000011000101000010110001000101001001000100111000110100100000011101001101";
		//String solnString
          // Results for Van de Vijver Data
		//String solnString = "10111110101100111101111111001111000111000100011100110100101111111010111010110011011111111010110110";
		
		String[] solnStrings = {
				
				
				
				
				
		};		
		int numberOfBits = solnStrings[0].length();
		try{
			
			
			// Connect to R Engine
			
			if (!Rengine.versionCheck()) {
			    System.err.println("** Version mismatch - Java files don't match library version.");
			    System.exit(1);
			}
		    System.out.println("Creating Rengine (with arguments)");
				// 1) we pass the arguments from the command line
				// 2) we won't use the main loop at first, we'll start it later
				//    (that's the "false" as second argument)
				// 3) the callbacks are implemented by the TextConsole class above
			Rengine re=new Rengine(args, false, new TextConsole());
		    System.out.println("Rengine created, waiting for R");
				// the engine creates R is a new thread, so we should wait until it's ready
		    if (!re.waitForR()) {
		            System.err.println("Cannot load R");
		            return;
		    }
		    
			//problem = new SurvivalAnalysis("Binary",numberOfBits,"basalSamplesRef33_169.arff", re, pValue, featureMaximization);

			


			GenerateSurvivalGraph problem = new GenerateSurvivalGraph("Binary",numberOfBits, dataFileName, testDataFileName, re);
		
			Binary[] vars =null;
			Solution solution = new Solution(problem);
			
			for (int ind=0; ind<solnStrings.length; ++ind){

				vars= new Binary[1];
				vars[0] = new Binary(solnStrings[ind].length());
				for (int i=0; i<solnStrings[ind].length();++i){
					if(solnStrings[ind].charAt(i)=='1'){
						vars[0].bits_.set(i, true);
					}
					else if(solnStrings[ind].charAt(i)=='0'){
						vars[0].bits_.set(i, false);
					}
					else{
						System.err.println("Invalid character in solution string.");
						System.exit(1);
					}
				}

				solution.setDecisionVariables(vars);
				problem.SolutionID = ind+1;
				problem.evaluate(solution);
			}
			
			
		
		}
		catch(Exception e){
			System.err.println("Error in problem / solution creation.");
			e.printStackTrace();
		}

	}

}



class TextConsole implements RMainLoopCallbacks
{
    public void rWriteConsole(Rengine re, String text, int oType) {
        System.out.print(text);
    }
    
    public void rBusy(Rengine re, int which) {
        System.out.println("rBusy("+which+")");
    }
    
    public String rReadConsole(Rengine re, String prompt, int addToHistory) {
        System.out.print(prompt);
        try {
            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
            String s=br.readLine();
            return (s==null||s.length()==0)?s:s+"\n";
        } catch (Exception e) {
            System.out.println("jriReadConsole exception: "+e.getMessage());
        }
        return null;
    }
    
    public void rShowMessage(Rengine re, String message) {
        System.out.println("rShowMessage \""+message+"\"");
    }
	
    public String rChooseFile(Rengine re, int newFile) {
	FileDialog fd = new FileDialog(new Frame(), (newFile==0)?"Select a file":"Select a new file", (newFile==0)?FileDialog.LOAD:FileDialog.SAVE);
	fd.show();
	String res=null;
	if (fd.getDirectory()!=null) res=fd.getDirectory();
	if (fd.getFile()!=null) res=(res==null)?fd.getFile():(res+fd.getFile());
	return res;
    }
    
    public void   rFlushConsole (Rengine re) {
    }
	
    public void   rLoadHistory  (Rengine re, String filename) {
    }			
    
    public void   rSaveHistory  (Rengine re, String filename) {
    }			
}
